version: '3.8'

services:
  # Backend API service
  backend:
    build:
      context: ./backend
      dockerfile: ../docker/Dockerfile.backend
    container_name: esm-backend
    restart: unless-stopped
    depends_on:
      - postgres
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432/employee_shift_management
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=24h
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - esm-network

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/Dockerfile.frontend
    container_name: esm-frontend
    restart: unless-stopped
    depends_on:
      - backend
    ports:
      - "80:80"
    networks:
      - esm-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: esm-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=employee_shift_management
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - esm-network

  # pgAdmin for database management (optional, can be commented out in production)
  pgadmin:
    image: dpage/pgadmin4
    container_name: esm-pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - esm-network

volumes:
  postgres-data:

networks:
  esm-network:
    driver: bridge
